/*
scrambling process at the transmitter and the descrambling process at the receiver are essentially 
the same operation but applied in reverse order.

The scrambler takes an input data stream and XORs it with 
a pseudo-random sequence generated by a linear feedback shift register (LFSR) 
to produce the scrambled output. The descrambler at the receiver takes the scrambled 
input and XORs it with the same pseudo-random sequence generated 
by the LFSR in reverse order to recover the original data.
*/

module Descrambler (
    input clk,
    input rst,
    input bit_in,
    output reg descramb_bit
);

    reg [6:0] state;
    wire feedback;

    assign feedback = (state[6] ^ state[3]);
    assign descramb_bit = (bit_in ^ feedback);

    always @(posedge clk) begin
        if (rst == 1'b1)
            state <= 7'b1010000;
        else
            state <= {state[5:0], feedback};
    end

endmodule
